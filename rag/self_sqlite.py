import sqlite3
import os

class ArticleDatabase:
    """Article Summary Database Management Class"""
    
    def __init__(self):
        """Initialize database connection"""
        self.db_path = "/hy-tmp/data/summary_sqliteDB/articles.db"
        # Ensure the directory exists
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        self._init_db()
    
    def _init_db(self):
        """Initialize SQLite database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Create articles table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS articles (
            pmid TEXT PRIMARY KEY,
            title TEXT,
            abstract TEXT,
            summary TEXT,
            pubdate TEXT
        )
        ''')
        
        # Check if pubdate column exists, add it if not
        cursor.execute("PRAGMA table_info(articles)")
        columns = [column[1] for column in cursor.fetchall()]
        if 'pubdate' not in columns:
            print("Adding pubdate column to database...")
            cursor.execute('ALTER TABLE articles ADD COLUMN pubdate TEXT')
            print("pubdate column added successfully")
        
        conn.commit()
        conn.close()
        
    def get_summary(self, pmid):
        """Retrieve article summary and publication date from the database
        
        Args:
            pmid: PubMed ID of the article
            
        Returns:
            tuple: (summary, pubdate), returns (None, None) if not exists
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT summary, pubdate FROM articles WHERE pmid = ?', (pmid,))
        result = cursor.fetchone()
        conn.close()
        
        return result if result else (None, None)
    
    def save_article(self, pmid, title, abstract, summary, pubdate=None):
        """Save article information to the database
        
        Args:
            pmid: PubMed ID of the article
            title: Article title
            abstract: Article abstract
            summary: Summary generated by LLM
            pubdate: Article publication date, optional
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute(
            'INSERT OR REPLACE INTO articles (pmid, title, abstract, summary, pubdate) VALUES (?, ?, ?, ?, ?)',
            (pmid, title, abstract, summary, pubdate)
        )
        
        conn.commit()
        conn.close()
    
    def update_pubdate(self, pmid, pubdate):
        """Update the publication date of an article
        
        Args:
            pmid: PubMed ID of the article
            pubdate: Article publication date
            
        Returns:
            bool: Whether the update was successful
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('UPDATE articles SET pubdate = ? WHERE pmid = ?', (pubdate, pmid))
        affected = cursor.rowcount
        
        conn.commit()
        conn.close()
        
        return affected > 0
    
    def get_all_articles(self):
        """Retrieve all articles from the database
        
        Returns:
            list: List containing information of all articles
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT pmid, title, abstract, summary, pubdate FROM articles')
        results = cursor.fetchall()
        conn.close()
        
        articles = []
        for row in results:
            articles.append({
                'pmid': row[0],
                'title': row[1],
                'abstract': row[2],
                'summary': row[3],
                'pubdate': row[4] if len(row) > 4 else None
            })
        
        return articles
    
    def delete_article(self, pmid):
        """Delete a specified article
        
        Args:
            pmid: PubMed ID of the article
            
        Returns:
            bool: Whether the deletion was successful
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM articles WHERE pmid = ?', (pmid,))
        affected = cursor.rowcount
        
        conn.commit()
        conn.close()
        
        return affected > 0
    
    def get_pubdate_percentage(self):
        """Get the percentage of data where pubdate column is not empty relative to all data
        
        Returns:
            float: Percentage of data with non-empty pubdate, range 0-100
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Get total number of records
        cursor.execute('SELECT COUNT(*) FROM articles')
        total_count = cursor.fetchone()[0]
        
        # Get number of records with non-empty pubdate
        cursor.execute('SELECT COUNT(*) FROM articles WHERE pubdate IS NOT NULL AND pubdate != ""')
        not_null_count = cursor.fetchone()[0]
        
        conn.close()
        
        # Calculate percentage, avoid division by zero
        if total_count == 0:
            return 0.0
        
        percentage = (not_null_count / total_count) * 100
        print("not_null_count:", not_null_count)
        return percentage
    
    def get_articles_with_pubdate(self):
        """Retrieve all articles with non-empty pubdate from the database
        
        Returns:
            list: List containing information of all articles with pubdate
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT pmid, title, abstract, summary, pubdate FROM articles WHERE pubdate IS NOT NULL AND pubdate != ""')
        results = cursor.fetchall()
        conn.close()
        
        articles = []
        for row in results:
            articles.append({
                'pmid': row[0],
                'title': row[1],
                'article_abstract': row[2],  # Use article_abstract as the key name to be consistent with other methods
                'reply': row[3],  # Use reply as the key name to be consistent with other methods
                'pub_date': row[4]  # Use pub_date as the key name to be consistent with other methods
            })
        
        return articles

if __name__ == "__main__":
    db = ArticleDatabase()
    print(len(db.get_all_articles()))
    articles = db.get_articles_with_pubdate()
    print(len(articles))
    print(db.get_pubdate_percentage())